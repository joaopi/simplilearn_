{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation AutoScaling EC2 CloudWatch: Create a load balanced, Auto Scaled website based on custom CloudWatch metric. Creates an Auto Scaling group behind a load balancer, scaling EC2 instances depending on the number of users logged into the website. ",

  "Parameters" : {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
	"AWSRegionArch2AMI" : {
	  "af-south-1"       : {"AMI" : "ami-064cc455f8a1ef504"},
	  "ap-east-1"        : {"AMI" : "ami-f85b1989"},
	  "ap-northeast-1"   : {"AMI" : "ami-0b2c2a754d5b4da22"},
	  "ap-northeast-2"   : {"AMI" : "ami-0493ab99920f410fc"},
	  "ap-northeast-3"   : {"AMI" : "ami-01344f6f63a4decc1"},
	  "ap-south-1"       : {"AMI" : "ami-03cfb5e1fb4fac428"},
	  "ap-southeast-1"   : {"AMI" : "ami-0ba35dc9caf73d1c7"},
	  "ap-southeast-2"   : {"AMI" : "ami-0ae99b503e8694028"},
	  "ca-central-1"     : {"AMI" : "ami-0803e21a2ec22f953"},
	  "cn-north-1"       : {"AMI" : "ami-07a3f215cc90c889c"},
	  "cn-northwest-1"   : {"AMI" : "ami-0a3b3b10f714a0ff4"},
	  "eu-central-1"     : {"AMI" : "ami-0474863011a7d1541"},
	  "eu-north-1"       : {"AMI" : "ami-0de4b8910494dba0f"},
	  "eu-south-1"       : {"AMI" : "ami-08427144fe9ebdef6"},
	  "eu-west-1"        : {"AMI" : "ami-015232c01a82b847b"},
	  "eu-west-2"        : {"AMI" : "ami-0765d48d7e15beb93"},
	  "eu-west-3"        : {"AMI" : "ami-0caf07637eda19d9c"},
	  "me-south-1"       : {"AMI" : "ami-0744743d80915b497"},
	  "sa-east-1"        : {"AMI" : "ami-0a52e8a6018e92bb0"},
	  "us-east-1"        : {"AMI" : "ami-032930428bf1abbff"},
	  "us-east-2"        : {"AMI" : "ami-027cab9a7bf0155df"},
	  "us-west-1"        : {"AMI" : "ami-088c153f74339f34c"},
	  "us-west-2"        : {"AMI" : "ami-01fee56b22f308154"}
	}
  },

  "Resources" : {
    "NodejsGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },  
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "2"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "scaleOutPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
	 "PolicyType": "SimpleScaling",
         "AutoScalingGroupName" : { "Ref" : "NodejsGroup" },
         "ScalingAdjustment" : "1"
      }
    },
    "scaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
	 "PolicyType": "SimpleScaling",
         "AutoScalingGroupName" : { "Ref" : "NodejsGroup" },
         "ScalingAdjustment" : "-1"
      }
    },
    "CPUAlarmHigh" : {
       "Type" : "AWS::CloudWatch::Alarm",
       "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "10",
         "AlarmDescription" : "Alarm if CPU too high or metric disappears indicating instance is down",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "scaleOutPolicy" } ],
         "Namespace" : "AWS/EC2",
         "Dimensions" : [ {
           "Name" : "AutoScalingGroupName",
           "Value" : { "Ref" : "NodejsGroup" }
         } ],
         "ComparisonOperator" : "GreaterThanThreshold",
         "MetricName" : "CPUUtilization"
      }
    },
    "CPUAlarmLow" : {
       "Type" : "AWS::CloudWatch::Alarm",
       "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "2",
         "AlarmDescription" : "Alarm if CPU too low",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "scaleDownPolicy" } ],
         "Namespace" : "AWS/EC2",
         "Dimensions" : [ {
           "Name" : "AutoScalingGroupName",
           "Value" : { "Ref" : "NodejsGroup" }
         } ],
        "ComparisonOperator" : "LessThanThreshold",
        "MetricName" : "CPUUtilization"
      }
    },
    "LoggedUsersAlarmHigh" : {
       "Type" : "AWS::CloudWatch::Alarm",
       "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "10",
         "AlarmDescription" : "Alarm if logged users too high or metric disappears indicating instance is down",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "scaleOutPolicy" } ],
         "Namespace" : "SITE/TRAFFIC",
         # "Dimensions" : [ {
         #  "Name" : "AutoScalingGroupName",
         #  "Value" : { "Ref" : "NodejsGroup" }
         # } ],
         "ComparisonOperator" : "GreaterThanThreshold",
         "MetricName" : "USERS_LOGGED"
      }
    },
    "LoggedUsersAlarmLow" : {
       "Type" : "AWS::CloudWatch::Alarm",
       "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "2",
         "AlarmDescription" : "Alarm if logged users too low",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "scaleDownPolicy" } ],
         "Namespace" : "SITE/TRAFFIC",
         # "Dimensions" : [ {
         #  "Name" : "AutoScalingGroupName",
         #  "Value" : { "Ref" : "NodejsGroup" }
         # } ],
         "ComparisonOperator" : "LessThanThreshold",
         "MetricName" : "USERS_LOGGED"
      }
    },
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple NodeJS application",  
        "AWS::CloudFormation::Init" : {
          "configSet" : {
            "GetNodeAndInstall": ["GetNode", "InstallNode"],
          },
          "GetNode": {    
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --configsets GetNodeAndInstall ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
		"mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },
            "commands" : {
              "getNode" : {
                "command" : "curl -sL https://rpm.nodesource.com/setup_lts.x | sudo bash -",
		"cwd": "/home/ec2-user"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
	  "InstallNode": {    
	    "packages": {
              "yum": {
                "gcc-c++": [],
                "make": [],
                "git": [],
                "nodejs": []
              }	      
            },
	    "sources": {
		"/etc/app": "https://github.com/joaopi/simplilearn_scaling_ec2_cloudwatch/archive/refs/heads/main.zip"               
	    }
          } 
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : "t2.micro",
	"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "## Get latest CloudFormation package - These packages change frequently\n",
          "yum update -y aws-cfn-bootstrap\n",

          "## Error reporting helper function\n",
          "function error_exit\n",
          "{\n",
          "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleNodejsInstance" }, "'\n",
          "   exit 1\n",
          "}\n",

          "## # Start cfn-init to Install all Metadata content (packages, sources, files, commands and services )\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfig",
          "   --configsets GetNodeAndInstall ",
          "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

          "## Raise file descriptor limits\n",
          "echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
          "echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",
          "ulimit -n 100000\n",                    

          "# Signal the status from cfn-init\n",
          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource NodejsGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, 
          "         -r \"NodejsGroup setup complete\" '", { "Ref" : "WaitHandleNodejsInstance" }, "'\n"
        ] ] } }
      }
    },

    "WaitHandleNodejsInstance" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },

    "WaitConditionNodejsInstance" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "NodejsGroup",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandleNodejsInstance" },
        "Timeout" : "300"
      }
    },

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"}
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress" : 
          [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"} },
            { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "VpcId" : { "Ref" : "VpcId" }          
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [
          "ApplicationLoadBalancer", "DNSName" ]}]]}
    }
  }
}
